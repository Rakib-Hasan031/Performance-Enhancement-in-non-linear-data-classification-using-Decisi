def Deep_Neural_Network_model(A, B, layers_dims, learning_rate = 0.0075, num_iterations = 3000, print_cost=False):

    np.random.seed(1)
    costs = []                      
    parameters = initialize_parameters_deep(layers_dims)
    for i in range(0, num_iterations):
        AL, caches = L_model_forward(A, parameters)
        cost = compute_cost(AL, B)
        grads = L_model_backward(AL, B, caches)
        parameters = update_parameters(parameters, grads, learning_rate)
        if print_cost and i % 1000 == 0:
            print ("Cost after iteration %i: %f" % (i, cost))
        if print_cost and i % 1000 == 0:
            costs.append(cost)
    return parameters
def predict(parameters, A):
    AL, cache = forward_propagation(A,parameters)
    predictions = np.round(AL)
    return predictions
predictions = predict(parameters, X_assess)
print("predictions mean = " + str(np.mean(predictions)))
parameters = Deep_Neural_Network_model(A, B, layers_dims, num_iterations = 10000, print_cost=True)
plot_decision_boundary(lambda a: predict(parameters, a.T), A, B.flatten())
plt.title("Decision Boundary for hidden layer size " + str(4))
predictions = predict(parameters, A)
print ('Accuracy: %d' % float((np.dot(B,predictions.T) + np.dot(1-B,1-predictions.T))/float(B.size)*100) + '%')    
